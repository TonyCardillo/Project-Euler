'''Euler Project :: Problem 8
Started: 7/22/2009
Solved: 9/1/2021
Speed (median of 3): 1.50 ms

Description:
The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832:

73167176531330624919225119674426574742355349194934
96983520312774506326239578318016984801869478851843
85861560789112949495459501737958331952853208805511
12540698747158523863050715693290963295227443043557
66896648950445244523161731856403098711121722383113
62229893423380308135336276614282806444486645238749
30358907296290491560440772390713810515859307960866
70172427121883998797908792274921901699720888093776
65727333001053367881220235421809751254540594752243
52584907711670556013604839586446706324415722155397
53697817977846174064955149290862569321978468622482
83972241375657056057490261407972968652414535100474
82166370484403199890008895243450658541227588666881
16427171479924442928230863465674813919123162824586
17866458359124566529476545682848912883142607690042
24219022671055626321111109370544217506941658960408
07198403850962455444362981230987879927244284909188
84580156166097919133875499200524063689912560717606
05886116467109405077541002256983155200055935729725
71636269561882670428252483600823257530420752963450

Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?

Correct Answer:
23,514,624,000


After Notes:
Looking at my 2009 codes, I completely misread this as 5 consecutive digits. 
The answer is the product of *thirteen* consecutive digits.
This sliding window method takes about 0.002 seconds on my Intel i5



'''

import time
startTime = time.time()



# The number is now a string with NO newline characters
number = """73167176531330624919225119674426574742355349194934
96983520312774506326239578318016984801869478851843
85861560789112949495459501737958331952853208805511
12540698747158523863050715693290963295227443043557
66896648950445244523161731856403098711121722383113
62229893423380308135336276614282806444486645238749
30358907296290491560440772390713810515859307960866
70172427121883998797908792274921901699720888093776
65727333001053367881220235421809751254540594752243
52584907711670556013604839586446706324415722155397
53697817977846174064955149290862569321978468622482
83972241375657056057490261407972968652414535100474
82166370484403199890008895243450658541227588666881
16427171479924442928230863465674813919123162824586
17866458359124566529476545682848912883142607690042
24219022671055626321111109370544217506941658960408
07198403850962455444362981230987879927244284909188
84580156166097919133875499200524063689912560717606
05886116467109405077541002256983155200055935729725
71636269561882670428252483600823257530420752963450""".replace("\n","")

def fnProductOfDigits(stringOrInt):
    stringOnly = str(stringOrInt)

    if "0" in stringOnly:
        return 0

    lenStringOnly = len(stringOnly)

    product = 1
    for digit in range(lenStringOnly):
        product *= int(stringOnly[digit])
    
    return product


# We will manually slide over the number, with a window 13 digits wide, multiplying the numbers
windowWidth = 13
theAnswer = 0

# Start at digit 0, end at digit 999 (the last digit) minus 13 (the windowSize), plus 1 (to prevent off by one error)
for leftmostDigit in range(0, 1000-windowWidth+1):
    # Send a 13 digit substring to the product function
    candidateProduct = fnProductOfDigits(number[leftmostDigit:leftmostDigit+windowWidth])

    if candidateProduct > theAnswer:
        theAnswer = candidateProduct

# Print the time to calculate
endTime = time.time()
print("{} seconds".format(endTime-startTime))

# Ding ding
print(theAnswer)

# End script in a tidy fashion
quit()